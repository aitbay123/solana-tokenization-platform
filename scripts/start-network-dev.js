const { exec } = require('child_process');
const os = require('os');

// –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ IPv6
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
  
  return 'localhost';
}

const localIP = getLocalIP();
const port = process.env.PORT || 3000;

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...');
console.log('');
console.log('üì± –î–æ—Å—Ç—É–ø —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ Wi-Fi —Å–µ—Ç–∏:');
console.log(`   http://${localIP}:${port}`);
console.log('');
console.log('üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø:');
console.log(`   http://localhost:${port}`);
console.log('');
console.log('‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
console.log('   1. –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–¥–Ω–æ–π Wi-Fi —Å–µ—Ç–∏');
console.log('   2. –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç', port);
console.log('   3. –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP-–∞–¥—Ä–µ—Å –≤—ã—à–µ');
console.log('');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –¥–æ—Å—Ç—É–ø–æ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
const server = exec(`next dev -H 0.0.0.0 -p ${port}`, (error, stdout, stderr) => {
  if (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error}`);
    return;
  }
});

server.stdout.on('data', (data) => {
  console.log(data.toString());
});

server.stderr.on('data', (data) => {
  console.error(data.toString());
});

server.on('close', (code) => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
});
